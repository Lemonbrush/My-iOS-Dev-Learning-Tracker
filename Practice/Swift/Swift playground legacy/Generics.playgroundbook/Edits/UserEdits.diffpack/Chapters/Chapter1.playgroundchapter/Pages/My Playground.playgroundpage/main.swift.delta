<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//Generics
func swapTwoValues&lt;T&gt;(_ a: inout T, _ b: inout T) {
    let temporaryA = a
    a = b
    b = temporaryA
}

//Stack realisation
struct Stack&lt;T&gt; {
    var values = [T]()
    init(_ stackElements: [T]) {
        values = stackElements
    }
    mutating func push(_ value: T){
        values.append(value)
    }
    mutating func pop() -&gt; T {
        return values.removeLast()
    }
}
extension Stack {
    var topItem: T? {
        return values.isEmpty ? nil : values.last
    }
}

var purse = Stack&lt;Int&gt;([1, 2, 3])
if let topItem = purse.topItem {
    print(topItem)
}

//Type constraints
func findInArr&lt;T:Equatable&gt;(find valueToFind:T, in values: [T]) -&gt;Int? {
    for (index, value) in values.enumerated() {
        if value == valueToFind { 
            return index 
        }
    }
    return nil
}

//Associated Types in Action
protocol Container {
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int { get }
    subscript(i: Int) -&gt; Item { get }
}

struct StackProtocoled&lt;Element&gt;: Container {
    var values = [Element]()
    mutating func push(_ item: Element) { values.append(item) }
    mutating func pop() -&gt; Element { return values.removeLast() }
    
    //conforming to the protocol
    typealias Item = Element
    mutating func append(_ item: Element) { push(item) }
    var count: Int { return values.count }
    subscript(i: Int) -&gt; Item { return values[i] }
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 1422}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
